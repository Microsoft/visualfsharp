<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="$(RepoToolsetDir)Imports.targets" />

  <Target Name="CopyAndSubstituteTextFiles"
          BeforeTargets="Compile"
          Inputs="@(CopyAndSubstituteText)"
          Outputs="@(CopyAndSubstituteText->'$(OutDir)%(TargetFilename)')" >

    <ItemGroup>
        <Results Include="@(CopyAndSubstituteText->'$(OutDir)%(TargetFilename)')">
            <Lines>
                $([System.Text.RegularExpressions.Regex]::Replace($([System.IO.File]::ReadAllText("%(CopyAndSubstituteText.FullPath)")), "%(CopyAndSubstituteText.Pattern1)", "%(CopyAndSubstituteText.Replacement1)"))
            </Lines>
            <Lines  Condition = "'%(CopyAndSubstituteText.Pattern2)' != ''">
                $([System.Text.RegularExpressions.Regex]::Replace($(FileText), "%(CopyAndSubstituteText.Pattern2)", "%(CopyAndSubstituteText.Replacement2)"))
            </Lines>
        </Results>
    </ItemGroup>
    
    <WriteLinesToFile File="$(OutDir)%(Results.Filename)%(Results.Extension)" Lines="%(Results.Lines)" Overwrite="true" />
  </Target>

  <!--
  =========================================================================
    Build FsSrGen files.
  =========================================================================
  -->
  <Target Name="CallFsSrGen"
          Inputs="@(FsSrGen)"
          Outputs="@(FsSrGen->'$(IntermediateOutputPath)%(Filename).fs');@(FsSrGen->'$(IntermediateOutputPath)%(Filename).resx')"
          Condition="'@(FsSrGen)' != ''">

    <PropertyGroup>
      <FsSrGenPath>$(ToolsDir)/fssrgen/fssrgen.dll</FsSrGenPath>
    </PropertyGroup>

    <!-- Create the output directory in case it doesn't exist yet -->
    <MakeDir Directories="$(IntermediateOutputPath)" />

    <!-- Run the tool -->
    <Exec Command="&quot;$(DotNetExePath)&quot; &quot;$(FsSrGenPath)&quot; &quot;%(FsSrGen.FullPath)&quot; &quot;$(IntermediateOutputPath)%(FsSrGen.Filename).fs&quot;  &quot;$(IntermediateOutputPath)%(FsSrGen.Filename).resx&quot; $(FsSrGenProjectName)" />
  </Target>

  <Target Name="ProcessFsSrGen"
          DependsOnTargets="CallFsSrGen"
          Condition="'@(FsSrGen)'!=''"
          BeforeTargets="CoreResGen">

    <ItemGroup>
      <CompileBefore Include="$(IntermediateOutputPath)%(FsSrGen.Filename).fs" />
      <FileWrites Include="$(IntermediateOutputPath)%(FsSrGen.Filename).fs" />
      <FileWrites Include="$(IntermediateOutputPath)%(FsSrGen.Filename).resx" />
      <EmbeddedResource Include="$(IntermediateOutputPath)%(FsSrGen.Filename).resx">
        <ManifestResourceName>%(FsSrGen.Filename)</ManifestResourceName>
        <Type>Resx</Type>
        <WithCulture>false</WithCulture>
      </EmbeddedResource>
    </ItemGroup>
  </Target>

  <ItemGroup>
    <AvailableItemName Include="FsLex">
      <Visible>false</Visible>
    </AvailableItemName>
    <AvailableItemName Include="FsYacc">
      <Visible>false</Visible>
    </AvailableItemName>
  </ItemGroup>

  <!-- Build FsLex files. -->
  <Target Name="CallFsLex"
          Inputs="@(FsLex)"
          Outputs="@(FsLex->'$(FsLexOutputFolder)%(Filename).fs')"
          Condition="'@(FsLex)'!=''"
          BeforeTargets="CoreCompile">

    <PropertyGroup>
      <FsLexPath>$(ToolsDir)/fslex/fslex.dll</FsLexPath>
    </PropertyGroup>

    <!-- Create the output directory -->
    <MakeDir Directories="$(FsLexOutputFolder)"/>

    <!-- Run the tool -->
    <Exec Command="&quot;$(DotNetExePath)&quot; &quot;$(FsLexPath)&quot;  -o &quot;$(FsLexOutputFolder)%(FsLex.Filename).fs&quot; %(FsLex.OtherFlags) %(FsLex.Identity)" />

    <!-- Make sure it will get cleaned  -->
    <CreateItem Include="$(FsLexOutputFolder)%(FsLex.Filename).fs">
      <Output TaskParameter="Include" ItemName="FileWrites"/>
    </CreateItem>
  </Target>

  <!-- Build FsYacc files. -->
  <Target Name="CallFsYacc"
          Inputs="@(FsYacc)"
          Outputs="@(FsYacc->'$(FsYaccOutputFolder)%(Filename).fs')"
          Condition="'@(FsYacc)'!=''"
          BeforeTargets="CoreCompile">

    <PropertyGroup>
      <FsYaccPath>$(ToolsDir)/fsyacc/fsyacc.dll</FsYaccPath>
    </PropertyGroup>

    <!-- Create the output directory -->
    <MakeDir Directories="$(FsYaccOutputFolder)" />

    <!-- Run the tool -->
    <Exec Command="&quot;$(DotNetExePath)&quot; &quot;$(FsYaccPath)&quot;  -o &quot;$(FsYaccOutputFolder)%(FsYacc.Filename).fs&quot; %(FsYacc.OtherFlags) %(FsYacc.Identity)" />

    <!-- Make sure it will get cleaned  -->
    <CreateItem Include="$(FsYaccOutputFolder)%(FsYacc.Filename).fs">
      <Output TaskParameter="Include" ItemName="FileWrites"/>
    </CreateItem>
  </Target>
</Project>
