<Project>

  <PropertyGroup>
    <XlfLanguages>en;$(XlfLanguages)</XlfLanguages>
    <TargetDotnetProfile Condition="$(TargetFramework.StartsWith('netstandard')) or $(TargetFramework.StartsWith('netcoreapp'))">coreclr</TargetDotnetProfile>
    <TargetDotnetProfile Condition="$(TargetFramework.StartsWith('net4'))">net40</TargetDotnetProfile>
    <ActualOutputPath Condition="'$(Language)' != 'VB'">$(MSBuildProjectDirectory)\$(OutputPath)</ActualOutputPath>
    <ActualOutputPath Condition="'$(Language)' == 'VB'">$(OutputPath)</ActualOutputPath>
    <FinalOutputPath>$(RepoRoot)$(Configuration)\$(TargetDotnetProfile)\bin</FinalOutputPath>
    <FinalIntermediateOutputPath>$(RepoRoot)$(Configuration)\$(TargetDotnetProfile)\obj</FinalIntermediateOutputPath>
  </PropertyGroup>

  <Target Name="HACK_CopyOutputsToTheProperLocation"
          AfterTargets="AfterBuild"
          Condition="'$(DisableOutputPathCopying)' != 'true'">
    <!--
    Ideally we'd set <OutputPath> to `$(Configuration)\[net40|coreclr]\bin`, but the calculation of `[net40|coreclr]`
    depends on the `$(TargetFramework)` variable which is set by the individual project files, but by the time we have
    that value (e.g., in this file) it's too late; some targets, particularly from the VsSDK have already used the
    values of $(OutputPath)/$(OutDir).

    The fix is to not set `$(Outputpath)` and simply copy stuff there after the fact.
    -->

    <ItemGroup>
      <OutputFilesToCopy Include="$(ActualOutputPath)**" />
      <IntermediateFilesToCopy Include="$(IntermediateOutputPath)\**" />
    </ItemGroup>

    <Message Text="Copying build artifacts to $(FinalOutputPath)" />
    <MakeDir Directories="$(FinalOutputPath);$(FinalIntermediateOutputPath)" />
    <Copy SourceFiles="@(OutputFilesToCopy)" DestinationFolder="$(FinalOutputPath)\%(RecursiveDir)" />
    <Copy SourceFiles="@(IntermediateFilesToCopy)" DestinationFolder="$(FinalIntermediateOutputPath)\%(RecursiveDir)" />
  </Target>


  <ItemDefinitionGroup>
    <PackageReference>
      <IsVsDependency>false</IsVsDependency>
    </PackageReference>
  </ItemDefinitionGroup>

  <Target Name="PackageFSharpDesignTimeTools" BeforeTargets="CoreCompile" DependsOnTargets="CollectPackageReferences">
      <ItemGroup>
        <EnhancedPackageReference Include="@(PackageReference)" Condition = " '%(PackageReference.IsFSharpDesignTimeProvider)' != 'false' and '%(PackageReference.IsFSharpDesignTimeProvider)' != '' ">
           <PropertyName Condition=" '%(PackageReference.Extension)' != '' ">%(PackageReference.FileName)%(PackageReference.Extension)</PropertyName>
           <PropertyName Condition=" '%(PackageReference.Extension)' == '' ">%(PackageReference.FileName)</PropertyName>
        </EnhancedPackageReference>

        <PropertyNames Include = "Pkg$([System.String]::Copy('%(EnhancedPackageReference.PropertyName)').Replace('.','_'))" />
        <FscCompilerTools Include = "$(%(PropertyNames.Identity))" />
      </ItemGroup>
  </Target>

  <!--
    ============================================================
                                        MoveVSDependencies

    Copy references that are marked as "CopyLocal" and their dependencies, including .pdbs, .xmls and satellites.
    ============================================================
    -->
  <Target Name="MoveVSDependencies" BeforeTargets = "_CopyFilesMarkedCopyLocal" Condition="'@(ReferenceCopyLocalPaths)' != ''">
    <ItemGroup>
        <ReferenceCopyLocalPathsUpdate Remove = "@(ReferenceCopyLocalPathsUpdate)" />

        <ReferenceCopyLocalPathsUpdate Include = "@(ReferenceCopyLocalPaths)" Condition = " '%(ReferenceCopyLocalPaths.FileName)' == 'Microsoft.Build'" />
        <ReferenceCopyLocalPathsUpdate Include = "@(ReferenceCopyLocalPaths)" Condition = " '%(ReferenceCopyLocalPaths.FileName)' == 'Microsoft.Build.Framework'" />
        <ReferenceCopyLocalPathsUpdate Include = "@(ReferenceCopyLocalPaths)" Condition = " '%(ReferenceCopyLocalPaths.FileName)' == 'Microsoft.Build.Utilities.Core'" />
        <ReferenceCopyLocalPathsUpdate Include = "@(ReferenceCopyLocalPaths)" Condition = " '%(ReferenceCopyLocalPaths.FileName)' == 'Microsoft.Build.Tasks.Core'" />
        <ReferenceCopyLocalPathsUpdate Include = "@(ReferenceCopyLocalPaths)" Condition = " '%(ReferenceCopyLocalPaths.FileName)' == 'System.Reflection.Metadata'" />
        <ReferenceCopyLocalPathsUpdate Include = "@(ReferenceCopyLocalPaths)" Condition = " '%(ReferenceCopyLocalPaths.FileName)' == 'System.Collections.Immutable'" />
        <ReferenceCopyLocalPathsUpdate Include = "@(ReferenceCopyLocalPaths)" Condition = " '%(ReferenceCopyLocalPaths.FileName)' == 'System.ValueTuple'" />
        <ReferenceCopyLocalPaths Remove = "@(ReferenceCopyLocalPathsUpdate)" />

        <ReferenceCopyLocalPaths Include = "@(ReferenceCopyLocalPathsUpdate)">
            <DestinationSubDirectory>\dependencies\</DestinationSubDirectory>
        </ReferenceCopyLocalPaths>

    </ItemGroup>
    <MakeDir Directories="$(FinalOutputPath)\dependencies" />
  </Target>


  <Import Project="build\targets\AssemblyVersions.props" />
  <Import Project="build\targets\ConvertPortablePdbs.targets" />
  <Import Project="build\targets\GenerateAssemblyAttributes.targets" />
  <Import Project="build\targets\GenerateInternalsVisibleTo.targets" />

</Project>
